        This version uses 4k bytes of table space 
    A 16 byte buffer has to be multiplied by a 16 byte key
    value in GF 128    If we consider a GF 128  value in a
    single byte  we can construct a table of the 256 16 byte
    values that result from the 256 values of this byte 
    This requires 4096 bytes  If we take the highest byte in
    the buffer and use this table to get the result  we then
    have to multiply by x^120 to get the final value  For the
    next highest byte the result has to be multiplied by x^112
    and so on  But we can do this by accumulating the result
    in an accumulator starting with the result for the top
    byte   We repeatedly multiply the accumulator value by
    x^8 and then add in  i e  xor  the 16 bytes of the next
    lower byte in the buffer  stopping when we reach the
    lowest byte  This requires a 4096 byte table 
  
struct gf128mul 4k  gf128mul init 4k lle const be128  g 
{
	struct gf128mul 4k  t 
	int j  k 

	t = kzalloc sizeof  t   GFP KERNEL  
	if   t 
		goto out 

	t t 128  =  g 
	for  j = 64  j   0  j   = 1 
		gf128mul x lle  t t j    t t j+j   

	for  j = 2  j   256  j += j 
		for  k = 1  k   j  ++k 
			be128 xor  t t j + k    t t j    t t k   

out 
	return t 
}

