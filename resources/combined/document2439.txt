   return 1 if a new loss event has been identified   
static int   two after loss struct tfrc rx hist  h  struct sk buff  skb  u32 n3 
{
	u64 s0 = tfrc rx hist loss prev h  tfrchrx seqno 
	    s1 = tfrc rx hist entry h  1  tfrchrx seqno 
	    s2 = tfrc rx hist entry h  2  tfrchrx seqno 
	    s3 = DCCP SKB CB skb  dccpd seq 

	if  likely dccp delta seqno s2  s3    0   {	   S2     S3   
		h loss count = 3 
		tfrc rx hist entry from skb tfrc rx hist entry h  3   skb  n3  
		return 1 
	}

	   S3     S2   

	if  dccp delta seqno s1  s3    0  {		   S1     S3     S2   
		  
		   Reorder history to insert S3 between S1 and S2
		   
		tfrc rx hist swap h  2  3  
		tfrc rx hist entry from skb tfrc rx hist entry h  2   skb  n3  
		h loss count = 3 
		return 1 
	}

	   S0     S3     S1   

	if  dccp loss free s0  s3  n3   {
		u64 n1 = tfrc rx hist entry h  1  tfrchrx ndp 

		if  dccp loss free s3  s1  n1   {
			   hole between S0 and S1 filled by S3   
			u64 n2 = tfrc rx hist entry h  2  tfrchrx ndp 

			if  dccp loss free s1  s2  n2   {
				   entire hole filled by S0  S3  S1  S2   
				h loss start = tfrc rx hist index h  2  
				h loss count = 0 
			} else {
				   gap remains between S1 and S2   
				h loss start = tfrc rx hist index h  1  
				h loss count = 1 
			}

		} else    gap exists between S3 and S1  loss count stays at 2   
			tfrc rx hist entry from skb tfrc rx hist loss prev h   skb  n3  

		return 0 
	}

	  
	   The remaining case   S0     S3     S1     S2   gap between S0 and S3
	   Reorder history to insert S3 between S0 and S1 
	   
	tfrc rx hist swap h  0  3  
	h loss start = tfrc rx hist index h  3  
	tfrc rx hist entry from skb tfrc rx hist entry h  1   skb  n3  
	h loss count = 3 

	return 1 
}

