   
   tfrc lh update i mean     Update the `open' loss interval I 0
   For recomputing p  returns `true' if p   p prev   =   1 p   1 p prev
   
u8 tfrc lh update i mean struct tfrc loss hist  lh  struct sk buff  skb 
{
	struct tfrc loss interval  cur = tfrc lh peek lh  
	u32 old i mean = lh i mean 
	s64 len 

	if  cur == NULL 			   not initialised   
		return 0 

	len = dccp delta seqno cur li seqno  DCCP SKB CB skb  dccpd seq  + 1 

	if  len    s64 cur li length  = 0 	   duplicate or reordered   
		return 0 

	if  SUB16 dccp hdr skb  dccph ccval  cur li ccval    4 
		  
		   Implements RFC 4342  10 2 
		   If a packet S  skb  exists whose seqno comes `after' the one
		   starting the current loss interval  cur  and if the modulo 16
		   distance from C cur  to C S  is greater than 4  consider all
		   subsequent packets as belonging to a new loss interval  This
		   test is necessary since CCVal may wrap between intervals 
		   
		cur li is closed = 1 

	if  tfrc lh length lh  == 1 		   due to RFC 3448  6 3 1   
		return 0 

	cur li length = len 
	tfrc lh calc i mean lh  

	return lh i mean   old i mean 
}

