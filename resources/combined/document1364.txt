static int snd es1968 capture open struct snd pcm substream  substream 
{
	struct snd pcm runtime  runtime = substream runtime 
	struct es1968  chip = snd pcm substream chip substream  
	struct esschan  es 
	int apu1  apu2 

	apu1 = snd es1968 alloc apu pair chip  ESM APU PCM CAPTURE  
	if  apu1   0 
		return apu1 
	apu2 = snd es1968 alloc apu pair chip  ESM APU PCM RATECONV  
	if  apu2   0  {
		snd es1968 free apu pair chip  apu1  
		return apu2 
	}
	
	es = kzalloc sizeof  es   GFP KERNEL  
	if   es  {
		snd es1968 free apu pair chip  apu1  
		snd es1968 free apu pair chip  apu2  
		return  ENOMEM 
	}

	es apu 0  = apu1 
	es apu 1  = apu1 + 1 
	es apu 2  = apu2 
	es apu 3  = apu2 + 1 
	es apu mode 0  = 0 
	es apu mode 1  = 0 
	es apu mode 2  = 0 
	es apu mode 3  = 0 
	es running = 0 
	es substream = substream 
	es mode = ESM MODE CAPTURE 

	   get mixbuffer   
	if   es mixbuf = snd es1968 new memory chip  ESM MIXBUF SIZE   == NULL  {
		snd es1968 free apu pair chip  apu1  
		snd es1968 free apu pair chip  apu2  
		kfree es  
                return  ENOMEM 
        }
	memset es mixbuf buf area  0  ESM MIXBUF SIZE  

	runtime private data = es 
	runtime hw = snd es1968 capture 
	runtime hw buffer bytes max = runtime hw period bytes max =
		calc available memory size chip    1024     keep MIXBUF size   
	snd pcm hw constraint pow2 runtime  0  SNDRV PCM HW PARAM BUFFER BYTES  

	spin lock irq  chip substream lock  
	list add  es list   chip substream list  
	spin unlock irq  chip substream lock  

	return 0 
}

