static void snd es1371 codec write struct snd ac97  ac97 
				   unsigned short reg  unsigned short val 
{
	struct ensoniq  ensoniq = ac97 private data 
	unsigned int t  x 

	mutex lock  ensoniq src mutex  
	for  t = 0  t   POLL COUNT  t++  {
		if    inl ES REG ensoniq  1371 CODEC     ES 1371 CODEC WIP   {
			   save the current state for latter   
			x = snd es1371 wait src ready ensoniq  
			outl  x    ES 1371 SRC DISABLE | ES 1371 DIS P1 |
			           ES 1371 DIS P2 | ES 1371 DIS R1   | 0x00010000 
			     ES REG ensoniq  1371 SMPRATE   
			   wait for not busy  state 0  first to avoid
			   transition states   
			for  t = 0  t   POLL COUNT  t++  {
				if   inl ES REG ensoniq  1371 SMPRATE     0x00870000  ==
				    0x00000000 
					break 
			}
			   wait for a SAFE time to write addr data and then do it  dammit   
			for  t = 0  t   POLL COUNT  t++  {
				if   inl ES REG ensoniq  1371 SMPRATE     0x00870000  ==
				    0x00010000 
					break 
			}
			outl ES 1371 CODEC WRITE reg  val   ES REG ensoniq  1371 CODEC   
			   restore SRC reg   
			snd es1371 wait src ready ensoniq  
			outl x  ES REG ensoniq  1371 SMPRATE   
			mutex unlock  ensoniq src mutex  
			return 
		}
	}
	mutex unlock  ensoniq src mutex  
	snd printk KERN ERR  codec write timeout at 0x lx  0x x \n  
		   ES REG ensoniq  1371 CODEC   inl ES REG ensoniq  1371 CODEC    
}

