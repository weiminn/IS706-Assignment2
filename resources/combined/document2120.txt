  
   allocate and initialize the descriptor buffers
   periods = number of periods
   fragsize = period size in bytes
   
static int build via table struct viadev  dev  struct snd pcm substream  substream 
			   struct pci dev  pci 
			   unsigned int periods  unsigned int fragsize 
{
	unsigned int i  idx  ofs  rest 
	struct via82xx  chip = snd pcm substream chip substream  

	if  dev table area == NULL  {
		   the start of each lists must be aligned to 8 bytes 
		   but the kernel pages are much bigger  so we don't care
		   
		if  snd dma alloc pages SNDRV DMA TYPE DEV  snd dma pci data chip pci  
					PAGE ALIGN VIA TABLE SIZE   2   8  
					 dev table    0 
			return  ENOMEM 
	}
	if    dev idx table  {
		dev idx table = kmalloc sizeof  dev idx table    VIA TABLE SIZE  GFP KERNEL  
		if    dev idx table 
			return  ENOMEM 
	}

	   fill the entries   
	idx = 0 
	ofs = 0 
	for  i = 0  i   periods  i++  {
		rest = fragsize 
		   fill descriptors for a period 
		   a period can be split to several descriptors if it's
		   over page boundary 
		   
		do {
			unsigned int r 
			unsigned int flag 
			unsigned int addr 

			if  idx  = VIA TABLE SIZE  {
				snd printk KERN ERR  via82xx  too much table size \n   
				return  EINVAL 
			}
			addr = snd pcm sgbuf get addr substream  ofs  
			  u32   dev table area  idx    1  = cpu to le32 addr  
			r = snd pcm sgbuf get chunk size substream  ofs  rest  
			rest  = r 
			if    rest  {
				if  i == periods   1 
					flag = VIA TBL BIT EOL     buffer boundary   
				else
					flag = VIA TBL BIT FLAG     period boundary   
			} else
				flag = 0     period continues to the next   
			  
			printk KERN DEBUG  via  tbl  d  at  d  size  d  
			         rest  d \n   idx  ofs  r  rest  
			  
			  u32   dev table area   idx  1  + 1  = cpu to le32 r | flag  
			dev idx table idx  offset = ofs 
			dev idx table idx  size = r 
			ofs += r 
			idx++ 
		} while  rest   0  
	}
	dev tbl entries = idx 
	dev bufsize = periods   fragsize 
	dev bufsize2 = dev bufsize   2 
	dev fragsize = fragsize 
	return 0 
}

