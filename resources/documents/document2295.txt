static int   devinit snd rme32 create struct rme32   rme32 
{
	struct pci dev  pci = rme32 pci 
	int err 

	rme32 irq =  1 
	spin lock init  rme32 lock  

	if   err = pci enable device pci     0 
		return err 

	if   err = pci request regions pci   RME32      0 
		return err 
	rme32 port = pci resource start rme32 pci  0  

	rme32 iobase = ioremap nocache rme32 port  RME32 IO SIZE  
	if   rme32 iobase  {
		snd printk KERN ERR  unable to remap memory region 0x lx 0x lx\n  
			   rme32 port  rme32 port + RME32 IO SIZE   1  
		return  ENOMEM 
	}

	if  request irq pci irq  snd rme32 interrupt  IRQF SHARED 
			 RME32   rme32   {
		snd printk KERN ERR  unable to grab IRQ  d\n   pci irq  
		return  EBUSY 
	}
	rme32 irq = pci irq 

	   read the card's revision number   
	pci read config byte pci  8   rme32 rev  

	   set up ALSA pcm device for S PDIF   
	if   err = snd pcm new rme32 card   Digi32 IEC958   0  1  1   rme32 spdif pcm     0  {
		return err 
	}
	rme32 spdif pcm private data = rme32 
	rme32 spdif pcm private free = snd rme32 free spdif pcm 
	strcpy rme32 spdif pcm name   Digi32 IEC958   
	if  rme32 fullduplex mode  {
		snd pcm set ops rme32 spdif pcm  SNDRV PCM STREAM PLAYBACK 
				 snd rme32 playback spdif fd ops  
		snd pcm set ops rme32 spdif pcm  SNDRV PCM STREAM CAPTURE 
				 snd rme32 capture spdif fd ops  
		snd pcm lib preallocate pages for all rme32 spdif pcm  SNDRV DMA TYPE CONTINUOUS 
						      snd dma continuous data GFP KERNEL  
						      0  RME32 MID BUFFER SIZE  
		rme32 spdif pcm info flags = SNDRV PCM INFO JOINT DUPLEX 
	} else {
		snd pcm set ops rme32 spdif pcm  SNDRV PCM STREAM PLAYBACK 
				 snd rme32 playback spdif ops  
		snd pcm set ops rme32 spdif pcm  SNDRV PCM STREAM CAPTURE 
				 snd rme32 capture spdif ops  
		rme32 spdif pcm info flags = SNDRV PCM INFO HALF DUPLEX 
	}

	   set up ALSA pcm device for ADAT   
	if   pci device == PCI DEVICE ID RME DIGI32  ||
	     pci device == PCI DEVICE ID RME DIGI32 PRO   {
		   ADAT is not available on DIGI32 and DIGI32 Pro   
		rme32 adat pcm = NULL 
	}
	else {
		if   err = snd pcm new rme32 card   Digi32 ADAT   1 
				       1  1   rme32 adat pcm     0 
		{
			return err 
		}		
		rme32 adat pcm private data = rme32 
		rme32 adat pcm private free = snd rme32 free adat pcm 
		strcpy rme32 adat pcm name   Digi32 ADAT   
		if  rme32 fullduplex mode  {
			snd pcm set ops rme32 adat pcm  SNDRV PCM STREAM PLAYBACK  
					 snd rme32 playback adat fd ops  
			snd pcm set ops rme32 adat pcm  SNDRV PCM STREAM CAPTURE  
					 snd rme32 capture adat fd ops  
			snd pcm lib preallocate pages for all rme32 adat pcm  SNDRV DMA TYPE CONTINUOUS 
							      snd dma continuous data GFP KERNEL  
							      0  RME32 MID BUFFER SIZE  
			rme32 adat pcm info flags = SNDRV PCM INFO JOINT DUPLEX 
		} else {
			snd pcm set ops rme32 adat pcm  SNDRV PCM STREAM PLAYBACK  
					 snd rme32 playback adat ops  
			snd pcm set ops rme32 adat pcm  SNDRV PCM STREAM CAPTURE  
					 snd rme32 capture adat ops  
			rme32 adat pcm info flags = SNDRV PCM INFO HALF DUPLEX 
		}
	}


	rme32 playback periodsize = 0 
	rme32 capture periodsize = 0 

	   make sure playback capture is stopped  if by some reason active   
	snd rme32 pcm stop rme32  0  

           reset DAC   
        snd rme32 reset dac rme32  

	   reset buffer pointer   
	writel 0  rme32 iobase + RME32 IO RESET POS  

	   set default values in registers   
	rme32 wcreg = RME32 WCR SEL |	    normal playback   
		RME32 WCR INP 0 |    input select   
		RME32 WCR MUTE 	    muting on   
	writel rme32 wcreg  rme32 iobase + RME32 IO CONTROL REGISTER  


	   init switch interface   
	if   err = snd rme32 create switches rme32 card  rme32     0  {
		return err 
	}

	   init proc interface   
	snd rme32 proc init rme32  

	rme32 capture substream = NULL 
	rme32 playback substream = NULL 

	return 0 
}

