static int   devinit snd sonicvibes create struct snd card  card 
					struct pci dev  pci 
					int reverb 
					int mge 
					struct sonicvibes    rsonic 
{
	struct sonicvibes  sonic 
	unsigned int dmaa  dmac 
	int err 
	static struct snd device ops ops = {
		 dev free =	snd sonicvibes dev free 
	} 

	 rsonic = NULL 
	   enable PCI device   
	if   err = pci enable device pci     0 
		return err 
	   check  if we can restrict PCI DMA transfers to 24 bits   
        if  pci set dma mask pci  DMA BIT MASK 24     0 ||
	    pci set consistent dma mask pci  DMA BIT MASK 24     0  {
		snd printk KERN ERR  architecture does not support 24bit PCI busmaster DMA\n   
		pci disable device pci  
                return  ENXIO 
        }

	sonic = kzalloc sizeof  sonic   GFP KERNEL  
	if  sonic == NULL  {
		pci disable device pci  
		return  ENOMEM 
	}
	spin lock init  sonic reg lock  
	sonic card = card 
	sonic pci = pci 
	sonic irq =  1 

	if   err = pci request regions pci   S3 SonicVibes      0  {
		kfree sonic  
		pci disable device pci  
		return err 
	}

	sonic sb port = pci resource start pci  0  
	sonic enh port = pci resource start pci  1  
	sonic synth port = pci resource start pci  2  
	sonic midi port = pci resource start pci  3  
	sonic game port = pci resource start pci  4  

	if  request irq pci irq  snd sonicvibes interrupt  IRQF SHARED 
			 S3 SonicVibes   sonic   {
		snd printk KERN ERR  unable to grab IRQ  d\n   pci irq  
		snd sonicvibes free sonic  
		return  EBUSY 
	}
	sonic irq = pci irq 

	pci read config dword pci  0x40   dmaa  
	pci read config dword pci  0x48   dmac  
	dmaio  = ~0x0f 
	dmaa  = ~0x0f 
	dmac  = ~0x0f 
	if   dmaa  {
		dmaa = dmaio 
		dmaio += 0x10 
		snd printk KERN INFO  BIOS did not allocate DDMA channel A i o  allocated at 0x x\n   dmaa  
	}
	if   dmac  {
		dmac = dmaio 
		dmaio += 0x10 
		snd printk KERN INFO  BIOS did not allocate DDMA channel C i o  allocated at 0x x\n   dmac  
	}
	pci write config dword pci  0x40  dmaa  
	pci write config dword pci  0x48  dmac  

	if   sonic res dmaa = request region dmaa  0x10   S3 SonicVibes DDMA A    == NULL  {
		snd sonicvibes free sonic  
		snd printk KERN ERR  unable to grab DDMA A port at 0x x 0x x\n   dmaa  dmaa + 0x10   1  
		return  EBUSY 
	}
	if   sonic res dmac = request region dmac  0x10   S3 SonicVibes DDMA C    == NULL  {
		snd sonicvibes free sonic  
		snd printk KERN ERR  unable to grab DDMA C port at 0x x 0x x\n   dmac  dmac + 0x10   1  
		return  EBUSY 
	}

	pci read config dword pci  0x40   sonic dmaa port  
	pci read config dword pci  0x48   sonic dmac port  
	sonic dmaa port  = ~0x0f 
	sonic dmac port  = ~0x0f 
	pci write config dword pci  0x40  sonic dmaa port | 9  	   enable + enhanced   
	pci write config dword pci  0x48  sonic dmac port | 9  	   enable   
	   ok   initialize S3 SonicVibes chip   
	outb SV RESET  SV REG sonic  CONTROL   		   reset chip   
	udelay 100  
	outb 0  SV REG sonic  CONTROL   	   release reset   
	udelay 100  
	outb SV ENHANCED | SV INTA |  reverb ? SV REVERB   0   SV REG sonic  CONTROL   
	inb SV REG sonic  STATUS   	   clear IRQs   
#if 1
	snd sonicvibes out sonic  SV IREG DRIVE CTRL  0  	   drive current 16mA   
#else
	snd sonicvibes out sonic  SV IREG DRIVE CTRL  0x40  	   drive current 8mA   
#endif
	snd sonicvibes out sonic  SV IREG PC ENABLE  sonic enable = 0  	   disable playback   capture   
	outb sonic irqmask = ~ SV DMAA MASK | SV DMAC MASK | SV UD MASK   SV REG sonic  IRQMASK   
	inb SV REG sonic  STATUS   	   clear IRQs   
	snd sonicvibes out sonic  SV IREG ADC CLOCK  0  	   use PLL as clock source   
	snd sonicvibes out sonic  SV IREG ANALOG POWER  0  	   power up analog parts   
	snd sonicvibes out sonic  SV IREG DIGITAL POWER  0  	   power up digital parts   
	snd sonicvibes setpll sonic  SV IREG ADC PLL  8000  
	snd sonicvibes out sonic  SV IREG SRS SPACE  sonic srs space = 0x80  	   SRS space off   
	snd sonicvibes out sonic  SV IREG SRS CENTER  sonic srs center = 0x00     SRS center off   
	snd sonicvibes out sonic  SV IREG MPU401  sonic mpu switch = 0x05  	   MPU 401 switch   
	snd sonicvibes out sonic  SV IREG WAVE SOURCE  sonic wave source = 0x00  	   onboard ROM   
	snd sonicvibes out sonic  SV IREG PCM RATE LOW   8000   65536   SV FULLRATE    0xff  
	snd sonicvibes out sonic  SV IREG PCM RATE HIGH    8000   65536   SV FULLRATE     8    0xff  
	snd sonicvibes out sonic  SV IREG LEFT ADC  mge ? 0xd0   0xc0  
	snd sonicvibes out sonic  SV IREG RIGHT ADC  0xc0  
	snd sonicvibes out sonic  SV IREG LEFT AUX1  0x9f  
	snd sonicvibes out sonic  SV IREG RIGHT AUX1  0x9f  
	snd sonicvibes out sonic  SV IREG LEFT CD  0x9f  
	snd sonicvibes out sonic  SV IREG RIGHT CD  0x9f  
	snd sonicvibes out sonic  SV IREG LEFT LINE  0x9f  
	snd sonicvibes out sonic  SV IREG RIGHT LINE  0x9f  
	snd sonicvibes out sonic  SV IREG MIC  0x8f  
	snd sonicvibes out sonic  SV IREG LEFT SYNTH  0x9f  
	snd sonicvibes out sonic  SV IREG RIGHT SYNTH  0x9f  
	snd sonicvibes out sonic  SV IREG LEFT AUX2  0x9f  
	snd sonicvibes out sonic  SV IREG RIGHT AUX2  0x9f  
	snd sonicvibes out sonic  SV IREG LEFT ANALOG  0x9f  
	snd sonicvibes out sonic  SV IREG RIGHT ANALOG  0x9f  
	snd sonicvibes out sonic  SV IREG LEFT PCM  0xbf  
	snd sonicvibes out sonic  SV IREG RIGHT PCM  0xbf  
	snd sonicvibes out sonic  SV IREG ADC OUTPUT CTRL  0xfc  
#if 0
	snd sonicvibes debug sonic  
#endif
	sonic revision = snd sonicvibes in sonic  SV IREG REVISION  

	if   err = snd device new card  SNDRV DEV LOWLEVEL  sonic   ops     0  {
		snd sonicvibes free sonic  
		return err 
	}

	snd sonicvibes proc init sonic  

	snd card set dev card   pci dev  

	 rsonic = sonic 
	return 0 
}

