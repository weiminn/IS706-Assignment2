snd rme32 capture hw params struct snd pcm substream  substream 
			    struct snd pcm hw params  params 
{
	int err  isadat  rate 
	struct rme32  rme32 = snd pcm substream chip substream  
	struct snd pcm runtime  runtime = substream runtime 

	if  rme32 fullduplex mode  {
		err = snd pcm lib malloc pages substream  params buffer bytes params   
		if  err   0 
			return err 
	} else {
		runtime dma area =  void   force   rme32 iobase +
					RME32 IO DATA BUFFER 
		runtime dma addr = rme32 port + RME32 IO DATA BUFFER 
		runtime dma bytes = RME32 BUFFER SIZE 
	}

	spin lock irq  rme32 lock  
	   enable AutoSync for record preparing   
	rme32 wcreg |= RME32 WCR AUTOSYNC 
	writel rme32 wcreg  rme32 iobase + RME32 IO CONTROL REGISTER  

	if   err = snd rme32 setformat rme32  params format params      0  {
		spin unlock irq  rme32 lock  
		return err 
	}
	if   err = snd rme32 playback setrate rme32  params rate params      0  {
		spin unlock irq  rme32 lock  
		return err 
	}
	if   rate = snd rme32 capture getrate rme32   isadat     0  {
                if   int params rate params   = rate  {
			spin unlock irq  rme32 lock  
                        return  EIO                     
                }
                if   isadat    runtime hw channels min == 2  ||
                      isadat    runtime hw channels min == 8   {
			spin unlock irq  rme32 lock  
                        return  EIO 
                }
	}
	   AutoSync off for recording   
	rme32 wcreg  = ~RME32 WCR AUTOSYNC 
	writel rme32 wcreg  rme32 iobase + RME32 IO CONTROL REGISTER  

	snd rme32 setframelog rme32  params channels params   0  
	if  rme32 playback periodsize  = 0  {
		if  params period size params     rme32 capture frlog  =
		    rme32 playback periodsize  {
			spin unlock irq  rme32 lock  
			return  EBUSY 
		}
	}
	rme32 capture periodsize =
	    params period size params     rme32 capture frlog 
	spin unlock irq  rme32 lock  

	return 0 
}

