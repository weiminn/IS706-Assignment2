   The m3's hardware volume works by incrementing   decrementing 2 counters
    without wrap around  in response to volume button presses and then
   generating an interrupt  The pair of counters is stored in bits 1 3 and 5 7
   of a byte wide register  The meaning of bits 0 and 4 is unknown    
static void snd m3 update hw volume unsigned long private data 
{
	struct snd m3  chip =  struct snd m3    private data 
	int x  val 
#ifndef CONFIG SND MAESTRO3 INPUT
	unsigned long flags 
#endif

	   Figure out which volume control button was pushed 
	   based on differences from the default register
	   values    
	x = inb chip iobase + SHADOW MIX REG VOICE    0xee 

	   Reset the volume counters to 4  Tests on the allegro integrated
	   into a Compaq N600C laptop  have revealed that 
	   1  Writing any value will result in the 2 counters being reset to
	      4 so writing 0x88 is not strictly necessary
	   2  Writing to any of the 4 involved registers will reset all 4
	      of them  and reading them always returns the same value for all
	      of them 
	   It could be that a maestro deviates from this  so leave the code
	   as is    
	outb 0x88  chip iobase + SHADOW MIX REG VOICE  
	outb 0x88  chip iobase + HW VOL COUNTER VOICE  
	outb 0x88  chip iobase + SHADOW MIX REG MASTER  
	outb 0x88  chip iobase + HW VOL COUNTER MASTER  

	   Ignore spurious HV interrupts during suspend   resume  this avoids
	   mistaking them for a mute button press    
	if  chip in suspend 
		return 

#ifndef CONFIG SND MAESTRO3 INPUT
	if   chip master switch ||  chip master volume 
		return 

	   FIXME  we can't call snd ac97   functions since here is in tasklet    
	spin lock irqsave  chip ac97 lock  flags  

	val = chip ac97 regs AC97 MASTER VOL  
	switch  x  {
	case 0x88 
		   The counters have not changed  yet we've received a HV
		   interrupt  According to tests run by various people this
		   happens when pressing the mute button    
		val ^= 0x8000 
		chip ac97 regs AC97 MASTER VOL  = val 
		outw val  chip iobase + CODEC DATA  
		outb AC97 MASTER VOL  chip iobase + CODEC COMMAND  
		snd ctl notify chip card  SNDRV CTL EVENT MASK VALUE 
			        chip master switch id  
		break 
	case 0xaa 
		   counters increased by 1   volume up   
		if   val   0x7f    0 
			val   
		if   val   0x7f00    0 
			val  = 0x0100 
		chip ac97 regs AC97 MASTER VOL  = val 
		outw val  chip iobase + CODEC DATA  
		outb AC97 MASTER VOL  chip iobase + CODEC COMMAND  
		snd ctl notify chip card  SNDRV CTL EVENT MASK VALUE 
			        chip master volume id  
		break 
	case 0x66 
		   counters decreased by 1   volume down   
		if   val   0x7f    0x1f 
			val++ 
		if   val   0x7f00    0x1f00 
			val += 0x0100 
		chip ac97 regs AC97 MASTER VOL  = val 
		outw val  chip iobase + CODEC DATA  
		outb AC97 MASTER VOL  chip iobase + CODEC COMMAND  
		snd ctl notify chip card  SNDRV CTL EVENT MASK VALUE 
			        chip master volume id  
		break 
	}
	spin unlock irqrestore  chip ac97 lock  flags  
#else
	if   chip input dev 
		return 

	val = 0 
	switch  x  {
	case 0x88 
		   The counters have not changed  yet we've received a HV
		   interrupt  According to tests run by various people this
		   happens when pressing the mute button    
		val = KEY MUTE 
		break 
	case 0xaa 
		   counters increased by 1   volume up   
		val = KEY VOLUMEUP 
		break 
	case 0x66 
		   counters decreased by 1   volume down   
		val = KEY VOLUMEDOWN 
		break 
	}

	if  val  {
		input report key chip input dev  val  1  
		input sync chip input dev  
		input report key chip input dev  val  0  
		input sync chip input dev  
	}
#endif
}

